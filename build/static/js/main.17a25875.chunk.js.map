{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setMyStyle","btntext","setBtnText","className","style","id","type","onClick","border","Alert","props","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","to","title","aboutText","toggleMode","htmlFor","toggleMode1","toggleMode2","TextForm","text","setText","heading","value","onChange","event","console","log","target","showAlert","rows","button1","newText","replace","trim","letter2","match","join","document","getElementById","select","navigator","clipboard","writeText","split","length","App","setMode","setAlert","setButton1","message","setTimeout","body","setInterval","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.17a25875.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n  \r\n const[myStyle,setMyStyle] = useState({\r\n   \r\n    color:'black',\r\n    backgroundColor:'white'\r\n\r\n  })\r\n const[btntext,setBtnText]= useState('Enable Dark Mode')\r\n\r\nconst toggleStyle = ()=>{\r\n  if(myStyle.color === 'black')\r\n  {\r\n    setMyStyle({\r\n\r\n      color:'white',\r\n      backgroundColor:'black',\r\n      border: '1px solid white'\r\n\r\n    })\r\n    \r\n    setBtnText(\"Enable Light Mode\")\r\n  }\r\n    else\r\n    {\r\n      setMyStyle({\r\n\r\n        color:'black',\r\n        backgroundColor:'white'\r\n  \r\n      })\r\n    setBtnText(\"Enable Dark Mode\")\r\n\r\n    }\r\n  }\r\n \r\n\r\n  return (\r\n\r\n        <div className=\"container\" style={myStyle}>\r\n            <h1 className=\"my-3\">About Us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div className=\"container my-3\">\r\n<button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary\" >{btntext}</button>\r\n</div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n     const capitalize =(word)=>{\r\n         const lower = word.toLowerCase();\r\n         return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n     }\r\n\r\n    return (\r\n       props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n <strong>{capitalize(props.alert.type)}</strong> : <strong>{props.alert.msg}</strong>\r\n  \r\n</div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n         <>\r\n <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        \r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link  active\" aria-current=\"page\" to=\"/about\">{props.aboutText}</Link>\r\n        </li>\r\n      </ul>\r\n      {/*<form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n    </form>*/}\r\n      \r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark mode</label>\r\n</div>\r\n<br/><br/>\r\n<div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode1} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Green  mode</label>\r\n</div>\r\n<div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode2} role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Yellow  mode</label>\r\n</div>\r\n\r\n    </div>\r\n  </div>\r\n</nav>\r\n\r\n</>\r\n    )\r\n}\r\nNavbar.propTypes = {title: PropTypes.string.isRequired,\r\n                    aboutText:PropTypes.string\r\n}\r\n\r\n","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        console.log(\"upper was clicked\" + text);\r\n        let newText=text.toUpperCase();\r\n        setText(newText)\r\n       props.showAlert(\"changed to uppercase\",\"success\");\r\n    }\r\n    const handleLoClick = ()=>{\r\n        console.log(\"upper was clicked\" + text);\r\n        let newText=text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\" changed to lowercase\",\"success\");\r\n      \r\n    }\r\n    const handleClearClick = ()=>{\r\n       \r\n        let newText='';\r\n        setText(newText)\r\n        props.showAlert(\"ClearText\",\"success\");\r\n    }\r\n    const handleClearspaceClick = ()=>{\r\n    \r\n        let newText=text.replace(/\\s+/g,' ').trim();\r\n        setText(newText)\r\n        props.showAlert(\"ClearSpaces\",\"success\");\r\n    }\r\n    const handleClearsymbolClick = ()=>{\r\n    \r\n        const letter=/[0-9/A-Z/a-z/ /]/g;\r\n        const letter1=text.match(letter);\r\n        const letter2=letter1.join('');\r\n        setText(letter2);\r\n        props.showAlert(\"ClearSpaces\",\"success\");\r\n    }\r\n    const handleOnlynumberClick = ()=>{\r\n    \r\n        const letter=/[0-9/ /]/g;\r\n        const letter1=text.match(letter);\r\n        const letter2=letter1.join('');\r\n        setText(letter2);\r\n        props.showAlert(\"Handle only number\",\"success\");\r\n    }\r\n    const handleOnChange = (event) =>{\r\n        console.log(\"on change\");\r\n        setText(event.target.value)\r\n        props.showAlert(\"Handle on change\",\"success\");\r\n    }\r\n    const copytext = (event) =>{\r\n     \r\n        var text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"copy text\",\"success\");\r\n    }\r\n    \r\n    const [text, setText] = useState('');\r\n    //setText(\"new text\");\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n<h1>{props.heading}</h1>\r\n<div className=\"mb-3\">\r\n<textarea className=\"form-control\" id=\"myBox\" value={text}  onChange={handleOnChange} style={{backgroundColor:props.mode==='light'?'white':'gray',color:props.mode==='dark'?'white':'black'}}  rows=\"8\"></textarea>\r\n</div>\r\n<button className={`btn btn-${props.button1} mx-1`} onClick={handleUpClick}>convert to upper case</button>\r\n<button className={`btn btn-${props.button1}  mx-2`} onClick={handleLoClick}>convert to lower case</button>\r\n<button className={`btn btn-${props.button1}  mx-2` }onClick={handleClearClick}>clear text</button>\r\n<button className={`btn btn-${props.button1}  mx-2` }onClick={handleClearspaceClick}>Remove Extra Space</button>\r\n<button className={`btn btn-${props.button1}  mx-2`} onClick={handleClearsymbolClick}>Remove symbol</button>\r\n<button className={`btn btn-${props.button1}  mx-2`} onClick={handleOnlynumberClick}>only extract number</button>\r\n<button className={`btn btn-${props.button1}  mx-2`} onClick={copytext}>copytext</button>\r\n        </div>\r\n      <div className=\"className my-3\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>your text survay</h1>\r\n        <p>{text.split(\"\").length} words and {text.length} charater</p>\r\n        <p>{0.008 * text.split(\" \").length} mimut read</p>\r\n        <h2 >preview </h2>\r\n        <p>{text.length>0?text:\"enter something to preview your text\"}</p>\r\n      </div> \r\n      </> \r\n    )\r\n}\r\n","import React, { useState } from 'react'\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\n\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n function App() {\n\n  const [mode, setMode]= useState('light');\n  const [alert, setAlert] = useState(null);\n  const [button1, setButton1]= useState('secondary');\n\n  const showAlert = (message,type) =>\n  {\n      setAlert({\n        msg: message,\n        type: type\n      }) \n  \n    setTimeout(() => {\n         setAlert(null);\n    }, 3000);\n    }\n\n  \n\n  const toggleMode =()=>{\n    if(mode === 'light')\n    {\n      setButton1('dark');\n      setMode('dark');\n      document.body.style.backgroundColor = '#0e1146';\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      document.title=\"Textutils-Darkmode\";\n      setInterval(() => {\n        document.title=\"Textutils is amazing\";\n      }, 2000);\n      setInterval(() => {\n        document.title=\"install textutils now\";\n      }, 1500);\n    }\n    else{\n      setButton1('secondary');\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode has been enabled\",\"success\");\n      document.title=\"Textutils-Lightmode\";\n    }\n  }\n  const toggleMode1 =()=>{\n    if(mode === 'light')\n    {\n      setButton1('success');\n      setMode('dark');\n      document.body.style.backgroundColor = 'green';\n      showAlert(\"Green mode has been enabled\",\"success\");\n    }\n    else{\n      setButton1('secondary');\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode has been enabled\",\"success\");\n    }\n  }\n  const toggleMode2 =()=>{\n    if(mode === 'light')\n    {\n      setButton1('warning');\n      setMode('dark');\n      document.body.style.backgroundColor = 'yellow';\n      showAlert(\"Yellow mode has been enabled\",\"success\");\n    }\n    else{\n      setButton1('secondary');\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"light mode has been enabled\",\"success\");\n    }\n  }\n    \n  return (\n    \n<>\n<Router>\n    {/*<Navbar title=\"Textutils2\"  aboutText=\"about textutils\"/>*/}\n    <Navbar title=\"Textutils2\" mode={mode} toggleMode={toggleMode}  toggleMode1={toggleMode1} toggleMode2={toggleMode2} aboutText=\"About\"/>\n    <Alert alert={alert}/>\n <div className=\"container\" >\n   { /* /users --> componenet 1\n     /users/home -->component 2 */}\n\n <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n           \n          <Route exact path=\"/\">\n          <TextForm heading=\"enter the text to analysis below\" showAlert={showAlert} button1={button1} mode={mode} />\n          </Route>\n</Switch>\n\n {/*<About/>*/}\n{/*<About/>*/}\n </div>\n </Router>\n </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}